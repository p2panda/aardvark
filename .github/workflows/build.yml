on:
  push:
  pull_request:
name: CI

jobs:
  flatpak:
    name: "Flatpak"
    runs-on: ubuntu-24.04
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-47
      options: --privileged
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install deps
        if: ${{ matrix.arch != 'x86_64' }}
        run: |
          dnf -y install docker
      - name: Set up QEMU
        if: ${{ matrix.arch != 'x86_64' }}
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: aardvark.flatpak
          manifest-path: org.p2panda.aardvark.json
          cache-key: flatpak-builder-${{ github.sha }}
          arch: ${{ matrix.arch }}

  macos:
    name: "macOS"
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            arch: x86_64
          - target: aarch64-apple-darwin
            arch: arm64
    steps:
      - uses: actions/checkout@v4
      - uses: moonrepo/setup-rust@v1
      - name: Install dependencies
        run: |
          brew install pkg-config gtk4 pango cairo gdk-pixbuf at-spi2-core graphene || true
          brew upgrade pkg-config gtk4 pango cairo gdk-pixbuf at-spi2-core graphene || true
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: Add target ${{ matrix.target }}
        run: rustup target add ${{ matrix.target }}
      - name: Build
        env:
          PKG_CONFIG_PATH: "/usr/local/opt/gtk4/lib/pkgconfig:/usr/local/opt/pango/lib/pkgconfig:/usr/local/opt/cairo/lib/pkgconfig:/usr/local/opt/gdk-pixbuf/lib/pkgconfig:/usr/local/opt/at-spi2-core/lib/pkgconfig:/usr/local/opt/graphene/lib/pkgconfig"
          PKG_CONFIG_ALLOW_CROSS: "1"
          CFLAGS: "-I/usr/local/include"
          LDFLAGS: "-L/usr/local/lib"
          PKG_CONFIG_SYSROOT_DIR: ""
          PKG_CONFIG_PATH_${{ matrix.target }}: "/usr/local/opt/gtk4/lib/pkgconfig:/usr/local/opt/pango/lib/pkgconfig:/usr/local/opt/cairo/lib/pkgconfig:/usr/local/opt/gdk-pixbuf/lib/pkgconfig:/usr/local/opt/at-spi2-core/lib/pkgconfig:/usr/local/opt/graphene/lib/pkgconfig"
        run: cargo build --release --target ${{ matrix.target }}
      - name: Create App Bundle
        run: |
          mkdir -p Aardvark.app/Contents/MacOS
          cp target/${{ matrix.target }}/release/aardvark Aardvark.app/Contents/MacOS/
          # Create Info.plist - you'll need to customize this
          cat > Aardvark.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>aardvark</string>
              <key>CFBundleIdentifier</key>
              <string>org.p2panda.aardvark</string>
              <key>CFBundleName</key>
              <string>Aardvark</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
          </dict>
          </plist>
          EOF
      - name: Create DMG
        run: |
          hdiutil create -volname "Aardvark" -srcfolder Aardvark.app -ov -format UDZO aardvark-${{ matrix.arch }}.dmg
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: aardvark-macos-${{ matrix.arch }}
          path: aardvark-${{ matrix.arch }}.dmg

  windows:
    name: "Windows"
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: moonrepo/setup-rust@v1
      - name: Install target
        if: matrix.arch == 'arm64'
        run: rustup target add aarch64-pc-windows-msvc
      - name: Install Dependencies
        run: |
          $arch = "${{ matrix.arch }}"
          $triplet = if ($arch -eq "x64") { "x64-windows" } else { "arm64-windows" }

          # Install both pkg-config and glib
          vcpkg install pkgconf:$triplet glib:$triplet

          # Set up various required paths
          $vcpkgRoot = "C:\vcpkg"
          $installPrefix = "$vcpkgRoot\installed\$triplet"

          # Add necessary paths to PATH
          echo "$installPrefix\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$vcpkgRoot\downloads\tools\pkgconfig\windows\pkg-config-0.29.2-3\tools\pkg-config-0.29.2\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Set pkg-config related environment variables
          echo "PKG_CONFIG=$vcpkgRoot\downloads\tools\pkgconfig\windows\pkg-config-0.29.2-3\tools\pkg-config-0.29.2\bin\pkg-config.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_PATH=$installPrefix\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_LIBDIR=$installPrefix\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_ALLOW_CROSS=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Verify pkg-config installation and paths
          pkg-config --version
          pkg-config --debug --print-errors --cflags --libs glib-2.0
        shell: pwsh
      - name: Build
        run: |
          $arch = "${{ matrix.arch }}"
          $target = if ($arch -eq "x64") { "x86_64-pc-windows-msvc" } else { "aarch64-pc-windows-msvc" }
          cargo build --release --target $target
        shell: pwsh
      - name: Package
        run: |
          mkdir aardvark-${{ matrix.arch }}
          copy target/${{ matrix.arch == 'x64' && 'x86_64-pc-windows-msvc' || 'aarch64-pc-windows-msvc' }}/release/aardvark.exe aardvark-${{ matrix.arch }}/
          # Add any additional DLLs or resources here
      - name: Create ZIP
        run: Compress-Archive -Path aardvark-${{ matrix.arch }} -DestinationPath aardvark-windows-${{ matrix.arch }}.zip
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: aardvark-windows-${{ matrix.arch }}
          path: aardvark-windows-${{ matrix.arch }}.zip
